#!/usr/bin/perl -w 
############################## check_snmp_mem ##############
# Version : 1.2
# Date : Sep 07 2018
# Author  : Patrick Proy (nagios at proy.org)
# Help : http://www.manubulon.com/nagios/
# Licence : GPL - http://www.fsf.org/licenses/gpl.txt
# Contrib : Jan Jungmann, Fredric Johansson
# TODO : 
#################################################################
#
# Help : ./check_snmp_mem.pl -h
#

use strict;
use Net::SNMP;
use Getopt::Long;
use Monitoring::Plugin;

my $Name = 'check_snmp_mem';
my $Version='1.2';
my $np;
# Nagios specific

#use lib "/usr/local/nagios/libexec";
#use utils qw(%ERRORS $TIMEOUT);
my $TIMEOUT = 15;
my %ERRORS = ('OK' => 0, 'WARNING' => 1, 'CRITICAL' => 2, 'UNKNOWN' => 3, 'DEPENDENT' => 4);

# SNMP Datas

# Net-snmp memory 

my $nets_ram_free   = "1.3.6.1.4.1.2021.4.6.0";         # Real memory free
my $nets_ram_total  = "1.3.6.1.4.1.2021.4.5.0";         # Real memory total
my $nets_ram_cache  = "1.3.6.1.4.1.2021.4.15.0";        # Real memory cached
my $nets_swap_free  = "1.3.6.1.4.1.2021.4.4.0";         # swap memory free
my $nets_swap_total = "1.3.6.1.4.1.2021.4.3.0";         # Swap memory total
my @nets_oids       = ($nets_ram_free, $nets_ram_total, $nets_swap_free, $nets_swap_total, $nets_ram_cache);

# Cisco 

my $cisco_mem_pool  = "1.3.6.1.4.1.9.9.48.1.1.1";       # Cisco memory pool
my $cisco_index     = "1.3.6.1.4.1.9.9.48.1.1.1.2";     # memory pool name and index
my $cisco_valid     = "1.3.6.1.4.1.9.9.48.1.1.1.4";     # Valid memory if 1
my $cisco_used      = "1.3.6.1.4.1.9.9.48.1.1.1.5";     # Used memory
my $cisco_free      = "1.3.6.1.4.1.9.9.48.1.1.1.6";     # Free memory
# .1 : type, .2 : name, .3 : alternate, .4 : valid, .5 : used, .6 : free, .7 : max free

# HP Procurve

my $hp_mem_pool     = "1.3.6.1.4.1.11.2.14.11.5.1.1.2.2.1.1";   # HP memory pool
my $hp_mem_index    = "1.3.6.1.4.1.11.2.14.11.5.1.1.2.2.1.1.1"; # memory slot index
my $hp_mem_total    = "1.3.6.1.4.1.11.2.14.11.5.1.1.2.2.1.1.5"; # Total Bytes
my $hp_mem_free     = "1.3.6.1.4.1.11.2.14.11.5.1.1.2.2.1.1.6"; # Free Bytes
my $hp_mem_free_seg = "1.3.6.1.4.1.11.2.14.11.5.1.1.2.2.1.1.3"; # Free segments

# AS/400 

# Windows NT/2K/(XP?)

# check_snmp_storage.pl -C <community> -H <hostIP> -m "^Virtual Memory$"  -w <warn %> -c <crit %>


# Globals
my $o_host          = undef;    # hostname
my $o_community     = undef;    # community
my $o_port          = 161;       # port
my $o_domain        = "udp";     # use tcp or udp, ipv4 or ipv6
my $o_verb          = undef;    # verbose mode
my $o_netsnmp       = 1;         # Check with netsnmp (default)
my $o_cisco         = undef;    # Check cisco router mem
my $o_hp            = undef;    # Check hp procurve mem
my $o_warn          = undef;    # warning level option
my $o_warnR         = undef;    # warning level for Real memory
my $o_warnS         = undef;    # warning levels for swap
my $o_crit          = undef;    # Critical level option
my $o_critR         = undef;    # critical level for Real memory
my $o_critS         = undef;    # critical level for swap
my $o_perf          = undef;    # Performance data option
my $o_cache         = undef;    # Include cached memory as used memory
my $o_timeout       = undef;    # Timeout (Default 5)
my $o_version2      = undef;    # use snmp v2c
# SNMPv3 specific
my $o_login         = undef;    # Login for snmpv3
my $o_passwd        = undef;    # Pass for snmpv3
my $v3protocols     = undef;    # V3 protocol list.
my $o_authproto     = 'md5';     # Auth protocol
my $o_privproto     = 'des';     # Priv protocol
my $o_privpass      = undef;    # priv password

# functions
my $usage = "Usage: $Name [-v] -H <host> -C <snmp_community> [-2] | (-l login -x passwd [-X pass -L <authp>,<privp>])  [-p <port>] -w <warn level> -c <crit level> [-I|-N|-E] [-f] [-m] [-t <timeout>] [-V]\n";

sub print_usage {
    print $usage;
}

sub isnnum { # Return true if arg is not a number
    my $num = shift;
    if ( $num =~ /^(\d+\.?\d*)|(^\.\d+)$/ ) {
        return 0;
    }
    return 1;
}

sub round ($$) {
    sprintf "%.$_[1]f", $_[0];
}

sub help {
    print "\nSNMP Memory Monitor for Nagios version ",$Version,"\n";
    print "(c)2004-2006 to my cat Ratoune - Author: Patrick Proy\n\n";
    print_usage();
    print <<EOT;


EOT
}

# For verbose output
sub verb {
    my $t = shift;
    print $t, "\n" if $o_verb;
}

# Get the alarm signal (just in case snmp timeout screws up)
$SIG{'ALRM'} = sub {
    $np->plugin_exit(UNKNOWN, "Alarm signal (Nagios time-out)");
};

sub check_options {
    $np->add_arg(
        spec => 'hostname|H=s',
        help => 'name or IP address of host to check',
        label => 'HOST',
        required => 1
    );
    $np->add_arg(
        spec => 'port|p=i',
        help => 'SNMP port (Default %s)',
        label => 'PORT',
        default => $o_port
    );
    $np->add_arg(
        spec => 'domain|D=s',
        help => 'Selects the transport protocol: udp or tcp. (tcp|tcp6|udp|udp6 : default %s)',
        label => '<tcp|tcp6|udp|udp6>',
        default => 'udp'
    );
    $np->add_arg(
        spec => 'community|C=s',
        help => 'community name for the host\'s SNMP agent (implies SNMP v1 or v2c with option)',
        label => 'COMMUNITY_NAME'
    );
    $np->add_arg(
        spec => 'v2c|2',
        help => 'Use snmp v2c'
    );
    $np->add_arg(
        spec => 'login|l=s',
        help => 'Login password for snmpv3 authentication '
    );
    $np->add_arg(
        spec => 'passwd|x=s',
        help => 'Auth password for snmpv3 authentication '
    );
    $np->add_arg(
        spec => 'privpass|X=s',
        help => 'Priv password for snmpv3 (AuthPriv protocol)'
    );
    $np->add_arg(
        spec => 'protocols|L=s',
        help => '<authproto> : Authentication protocol (md5|sha : default md5)
   <privproto> : Priv protocole (des|aes : default des)',
        label => '<authproto>,<privproto>'
    );
    
    
    $np->add_arg(
        spec => 'netsnmp|N',
        help => 'check linux memory & swap provided by Net SNMP (default)',
        default => 1
    );
    $np->add_arg(
        spec => 'memcache|m',
        help => 'include cached memory in used memory (only with Net-SNMP)'
    );
    $np->add_arg(
        spec => 'cisco|I',
        help => 'check cisco memory (sum of all memory pools)'
    );
    $np->add_arg(
        spec => 'hp|E',
        help => 'check HP proccurve memory'
    );
    
    $np->add_arg(
        spec => 'warn|w=s',
        help => 'warning level for memory in percent (0 for no checks) 
   Default (-N switch) : comma separated level for Real Memory and Swap 
   -I switch : warning level',
        required => 1
    );
    $np->add_arg(
        spec => 'crit|c=s',
        help => 'critical level for memory in percent (0 for no checks)
   Default (-N switch) : comma separated level for Real Memory and Swap 
   -I switch : critical level',
        required => 1
    );
    $np->add_arg(
        spec => 'perfdata|f',
        help => 'Performance data output'
    );
    
    $np->getopts;
    $o_host = $np->opts->hostname;
    $o_port = $np->opts->port;
    $o_domain = $np->opts->domain;
    
    $o_timeout = $np->opts->timeout;
    
    $o_warn = $np->opts->warn;
    $o_crit = $np->opts->crit;
    
    $o_community = $np->opts->community;
    $o_login = $np->opts->login;
    $o_passwd = $np->opts->passwd;
    $o_version2 = $np->opts->v2c;
    $o_privpass = $np->opts->privpass;
    $v3protocols = $np->opts->protocols;
    
    $o_verb = $np->opts->verbose;
    
    $o_cisco = $np->opts->cisco;
    $o_netsnmp = $np->opts->netsnmp;
    $o_hp = $np->opts->hp;
    $o_cache = $np->opts->memcache;
    $o_perf = $np->opts->perfdata;
    
    if ($o_domain !~ /^(udp|udp6|tcp|tcp6)$/) {
        $np->plugin_exit(UNKNOWN, "Invalid transport domain given!");
    }
    # check snmp information
    if ( !defined($o_community) && (!defined($o_login) || !defined($o_passwd)) ) {
        $np->plugin_exit(UNKNOWN, "Put snmp login info!");
    }
    if ((defined($o_login) || defined($o_passwd)) && (defined($o_community) || defined($o_version2)) ) {
        $np->plugin_exit(UNKNOWN, "Can't mix SNMP v1, 2c and 3 protocols!");
    }
    if (defined ($v3protocols)) {
        if (!defined($o_login)) {
            $np->plugin_exit(UNKNOWN, "Put SNMP v3 login info with protocols!");
        }
        my @v3proto = split(/,/, $v3protocols);
        if ((defined ($v3proto[0])) && ($v3proto[0] ne "")) { # Auth protocol
            $o_authproto=$v3proto[0];
        }
        if (defined ($v3proto[1])) { # Priv  protocol
            $o_privproto = $v3proto[1];
        }
        if ((defined ($v3proto[1])) && (!defined($o_privpass))) {
            $np->plugin_exit(UNKNOWN, "Put SNMP v3 priv login info with priv protocols!");
        }
    }
    if (defined($o_timeout) && (isnnum($o_timeout) || ($o_timeout < 2) || ($o_timeout > 60))) {
        $np->plugin_exit(UNKNOWN, "Timeout must be >1 and <60 !");
    }
    if (!defined($o_timeout)) {
        $o_timeout=5;
    }
    #Check Warning and crit are present
    if ( ! defined($o_warn) || ! defined($o_crit)) {
        $np->plugin_exit(UNKNOWN, "put warning and critical values!");
    }
    # Get rid of % sign
    $o_warn =~ s/\%//g; 
    $o_crit =~ s/\%//g;
    # if -N or -E switch , undef $o_netsnmp
    if (defined($o_cisco) || defined($o_hp) ) {
        $o_netsnmp = undef;
        if (isnnum($o_warn) || isnnum($o_crit)) {
            $np->plugin_exit(UNKNOWN, "Numeric value for warning or critical!");
        }
        if ( ($o_crit != 0) && ($o_warn > $o_crit) ) {
            $np->plugin_exit(UNKNOWN, "warning <= critical !");
        }
    }
    if (defined($o_netsnmp)) {
        my @o_warnL = split(/,/, $o_warn);
        my @o_critL = split(/,/, $o_crit);
        if (($#o_warnL != 1) || ($#o_critL != 1)) {
            $np->plugin_exit(UNKNOWN, "2 warnings and critical!");
        }
        for (my $i = 0; $i < 2; $i++) {
            if (isnnum($o_warnL[$i]) || isnnum($o_critL[$i])) {
                $np->plugin_exit(UNKNOWN, "Numeric value for warning or critical!");
            }
            if (($o_critL[$i] != 0) && ($o_warnL[$i] > $o_critL[$i])) {
                $np->plugin_exit(UNKNOWN, "warning <= critical !");
            }
            if ($o_critL[$i] > 100) {
                $np->plugin_exit(UNKNOWN, "critical percent must be < 100 !");
            }
        }
        $o_warnR = $o_warnL[0];
        $o_warnS = $o_warnL[1];
        $o_critR = $o_critL[0];
        $o_critS = $o_critL[1];
    }
}

########## MAIN #######

$np = Monitoring::Plugin->new(
    version => $Version,
    shortname => $Name,
    usage => $usage,
    license => 'GPLv2',
    blurb => 'SNMP Memory Monitor for Nagios\n(c)2004-2006 Patrick Proy'
);

check_options();

# Check gobal timeout if snmp screws up
if (defined($TIMEOUT)) {
    verb("Alarm at $TIMEOUT");
    alarm($TIMEOUT);
} else {
    verb("no timeout defined : $o_timeout + 10");
    alarm ($o_timeout+10);
}

# Connect to host
my ($session,$error);
if ( defined($o_login) && defined($o_passwd)) {
    # SNMPv3 login
    if (!defined ($o_privpass)) {
        verb("SNMPv3 AuthNoPriv login : $o_login, $o_authproto");
        ($session, $error) = Net::SNMP->session(
            -hostname     => $o_host,
            -port         => $o_port,
            -version      => '3',
            -username     => $o_login,
            -authpassword => $o_passwd,
            -authprotocol => $o_authproto,
            -timeout      => $o_timeout,
            -domain       => $o_domain
        );
    } else {
        verb("SNMPv3 AuthPriv login : $o_login, $o_authproto, $o_privproto");
        ($session, $error) = Net::SNMP->session(
            -hostname     => $o_host,
            -port         => $o_port,
            -version      => '3',
            -username     => $o_login,
            -authpassword => $o_passwd,
            -authprotocol => $o_authproto,
            -privpassword => $o_privpass,
            -privprotocol => $o_privproto,
            -timeout      => $o_timeout,
            -domain       => $o_domain
        );
    }
} else {
    if (defined ($o_version2)) {
        # SNMPv2 Login
        verb("SNMP v2c login");
        ($session, $error) = Net::SNMP->session(
            -hostname  => $o_host,
            -version   => 2,
            -community => $o_community,
            -port      => $o_port,
            -timeout   => $o_timeout,
            -domain    => $o_domain
        );
    } else {
        # SNMPV1 login
        verb("SNMP v1 login");
        ($session, $error) = Net::SNMP->session(
            -hostname  => $o_host,
            -community => $o_community,
            -port      => $o_port,
            -timeout   => $o_timeout,
            -domain    => $o_domain
        );
    }
}
if (!defined($session)) {
    $np->plugin_exit(UNKNOWN, join("", "Opening session: ",$error));
}

# Global variable
my $resultat = undef;

########### Cisco memory check ############
if (defined ($o_cisco)) {

    # Get Cisco memory table
    $resultat = $session->get_table(Baseoid => $cisco_mem_pool);
    
    if (!defined($resultat)) {
        my $session_error = $session->error;
        $session->close;
        $np->plugin_exit(UNKNOWN, join("", "Description table: ", $session_error));
    }
    my (@oid, @index) = (undef, undef);
    my $nindex = 0;
    foreach my $key (keys %$resultat) {
        verb("OID : $key, Desc : $$resultat{$key}");
        if ( $key =~ /$cisco_index/ ) { 
            @oid = split (/\./,$key);
            $index[$nindex++] = pop(@oid);
        }
    }
    
    # Check if at least 1 memory pool exists
    if ($nindex == 0) {
        $session->close;
        $np->plugin_exit(UNKNOWN, "No memory pools found");
    }

    # Test every memory pool
    my ($c_output, $prct_free) = (undef, undef);
    my ($warn_s, $crit_s) = (0, 0);
    my ($used, $free) = (0, 0);
    foreach (@index) {
        $c_output .= "," if defined($c_output);
        if ( $$resultat{$cisco_valid . "." . $_} == 1 ) {
            $used += $$resultat{$cisco_used . "." . $_};
            $free += $$resultat{$cisco_free . "." . $_};
            $prct_free = round($$resultat{$cisco_used . "." . $_} * 100 / ($$resultat{$cisco_free . "." . $_} + $$resultat{$cisco_used . "." . $_}), 0);
            $c_output .= $$resultat{$cisco_index . "." . $_} . ":" . $prct_free . "%";
            if (($o_crit != 0) && ($o_crit <= $prct_free)) { 
                $crit_s = 1;
            } elsif (($o_warn != 0) && ($o_warn <= $prct_free)) {
                $warn_s = 1;
            }
        } else {
            $c_output .= $$resultat{$cisco_index . "." . $_} . ": INVALID";
            $crit_s = 1;
        }
    }
    my $total=$used + $free; 
    $prct_free = round($used * 100 / ($total), 0);
    verb("Total used : $used, free: $free, output : $c_output");
    my $c_status = OK;
    $c_output .= " : " . $prct_free ."% : ";
    if ($crit_s == 1 ) {
        $c_output .= " > " . $o_crit ;
        $c_status = CRITICAL;
    } else {
        if ($warn_s == 1 ) {
            $c_output.= " > " . $o_warn;
            $c_status = WARNING;
        }
    }
    $c_output .= " ; ".$c_status;
    if (defined($o_perf)) {
        $c_output .= " | ram_used=" . $used.";";
        $c_output .= ($o_warn ==0) ? ";" : round($o_warn * $total / 100,0).";"; 
        $c_output .= ($o_crit ==0) ? ";" : round($o_crit * $total / 100,0).";";
        $c_output .= "0;" . $total;
    }
    $session->close;
    $np->plugin_exit($c_status, $c_output);
}

########### HP Procurve memory check ############
if (defined($o_hp)) {

    # Get hp memory table
    $resultat = $session->get_table(Baseoid => $hp_mem_pool);
    
    if (!defined($resultat)) {
        my $session_error = $session->error;
        $session->close;
        $np->plugin_exit(UNKNOWN, join("", "Description table: ", $session_error));
    }
    my (@oid, @index) = (undef, undef);
    my $nindex = 0;
    foreach my $key (keys %$resultat) {
        verb("OID : $key, Desc : $$resultat{$key}");
        if ( $key =~ /$hp_mem_index/ ) { 
            @oid = split(/\./,$key);
            $index[$nindex++] = pop(@oid);
        }
    }
    
    # Check if at least 1 memory slots exists
    if ($nindex == 0) {
        $session->close;
        $np->plugin_exit(UNKNOWN, "No memory slots found");
    }

    # Consolidate the datas
    my ($total, $free) = (0,0);
    my ($c_output,$prct_free) = (undef, undef);
    foreach (@index) {
        $c_output .="," if defined ($c_output);
        $total += $$resultat{$hp_mem_total . "." . $_};
        $free += $$resultat{$hp_mem_free . "." . $_};
        $c_output .= "Slot " . $$resultat{$hp_mem_index . "." . $_} . ":" 
            .round( 
            100 - ($$resultat{$hp_mem_free . "." . $_} *100 / 
                        $$resultat{$hp_mem_total . "." . $_}) ,0)
            . "%";
    }
    my $used = $total - $free; 
    $prct_free = round($used * 100 / ($total), 0);
    verb("Used : $used, Free: $free, Output : $c_output");
    my $c_status = OK;
    $c_output .= " : " . $prct_free ."% : ";
    if (($o_crit != 0) && ($o_crit <= $prct_free)) {
        $c_output .= " > " . $o_crit ;
        $c_status = CRITICAL;
    } else {
        if (($o_warn != 0) && ($o_warn <= $prct_free)) {
            $c_output.= " > " . $o_warn;
            $c_status = WARNING;
        }
    }
    if (defined($o_perf)) {
        $c_output .= " | ram_used=" . $used.";";
        $c_output .= ($o_warn == 0) ? ";" : round($o_warn * $total / 100,0).";"; 
        $c_output .= ($o_crit == 0) ? ";" : round($o_crit * $total / 100,0).";";
        $c_output .= "0;" . $total ;
    }
    $session->close;
    $np->plugin_exit($c_status, $c_output);
}

########### Net snmp memory check ############
if (defined ($o_netsnmp)) {

    # Get NetSNMP memory values
    $resultat = $session->get_request(-varbindlist => \@nets_oids);
    
    if (!defined($resultat)) {
        my $session_error = $session->error;
        $session->close;
        $np->plugin_exit(UNKNOWN, join("", "netSNMP: ", $session_error));
    }
  
    my ($realused, $swapused) = (undef, undef);
  
    $realused= defined($o_cache) ? 
        ($$resultat{$nets_ram_total} - $$resultat{$nets_ram_free}) / $$resultat{$nets_ram_total}
        :
        ($$resultat{$nets_ram_total} - ($$resultat{$nets_ram_free} + $$resultat{$nets_ram_cache})) / $$resultat{$nets_ram_total};

    if($$resultat{$nets_ram_total} == 0) {
        $realused = 0;
    }

    $swapused = ($$resultat{$nets_swap_total} == 0) ? 0 :
        ($$resultat{$nets_swap_total} - $$resultat{$nets_swap_free}) / $$resultat{$nets_swap_total}; 
    $realused = round($realused * 100,0);
    $swapused = round($swapused * 100,0);
    defined($o_cache) ? 
        verb("Ram : $$resultat{$nets_ram_free} / $$resultat{$nets_ram_total} : $realused")
        :
        verb("Ram : $$resultat{$nets_ram_free} ($$resultat{$nets_ram_cache} cached) / $$resultat{$nets_ram_total} : $realused");
    verb("Swap : $$resultat{$nets_swap_free} / $$resultat{$nets_swap_total} : $swapused");
  
    my $n_status = OK;
    my $n_output = "Ram : " . $realused . "%, Swap : " . $swapused . "%";
    if ((($o_critR != 0) && ($o_critR <= $realused)) || (($o_critS != 0) && ($o_critS <= $swapused))) {
        $n_output .= ": > " . $o_critR . ", " . $o_critS;
        $n_status = CRITICAL;
    } else {
        if ((($o_warnR != 0) && ($o_warnR <= $realused)) || (($o_warnS != 0) && ($o_warnS <= $swapused))) {
            $n_output.= ": > " . $o_warnR . ", " . $o_warnS;
            $n_status = WARNING;
        }
    } 
    if (defined($o_perf)) {
        if (defined($o_cache)) {
            $n_output .= " | ram_used=" . ($$resultat{$nets_ram_total} - $$resultat{$nets_ram_free}).";";
        } else {
            $n_output .= " | ram_used=" . ($$resultat{$nets_ram_total} - $$resultat{$nets_ram_free} - $$resultat{$nets_ram_cache}).";";
        }
        $n_output .= ($o_warnR == 0) ? ";" : round($o_warnR * $$resultat{$nets_ram_total} / 100,0).";";  
        $n_output .= ($o_critR == 0) ? ";" : round($o_critR * $$resultat{$nets_ram_total} / 100,0).";";  
        $n_output .= "0;" . $$resultat{$nets_ram_total}. " ";
        $n_output .= "swap_used=" . ($$resultat{$nets_swap_total} - $$resultat{$nets_swap_free}).";";
        $n_output .= ($o_warnS == 0) ? ";" : round($o_warnS * $$resultat{$nets_swap_total} / 100,0).";";  
        $n_output .= ($o_critS == 0) ? ";" : round($o_critS * $$resultat{$nets_swap_total} / 100,0).";"; 
        $n_output .= "0;" . $$resultat{$nets_swap_total};
    }  
    $session->close;
    $np->plugin_exit($n_status, $n_output);
}
